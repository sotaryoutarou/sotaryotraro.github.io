{"version":3,"sources":["webpack:///./src/components/bio.js","webpack:///./src/pages/index.js"],"names":["Bio","data","useStaticQuery","author","site","siteMetadata","social","avatar","childImageSharp","fixed","style","display","marginBottom","rhythm","alt","name","marginRight","minWidth","borderRadius","imgStyle","summary","href","twitter","BlogIndex","location","siteTitle","title","posts","allMarkdownRemark","nodes","length","map","post","frontmatter","fields","slug","key","itemScope","itemType","boxShadow","to","itemProp","date","dangerouslySetInnerHTML","__html","description","excerpt","pageQuery"],"mappings":"6FAAA,sEA8EeA,IAjEH,WAAO,IAAD,QACVC,EAAOC,yBAAe,cAwBtBC,EAAM,UAAGF,EAAKG,KAAKC,oBAAb,aAAG,EAAwBF,OACjCG,EAAM,UAAGL,EAAKG,KAAKC,oBAAb,aAAG,EAAwBC,OAEjCC,EAASN,SAAH,UAAGA,EAAMM,cAAT,iBAAG,EAAcC,uBAAjB,aAAG,EAA+BC,MAE9C,OACE,yBACEC,MAAO,CACLC,QAAQ,OACRC,aAAcC,YAAO,OAGtBN,GACC,kBAAC,IAAD,CACEE,MAAOF,EACPO,KAAKX,aAAA,EAAAA,EAAQY,OAAR,GACLL,MAAO,CACLM,YAAaH,YAAO,IACpBD,aAAc,EACdK,SAAU,GACVC,aAAa,QAEfC,SAAU,CACRD,aAAa,UAIlBf,aAAA,EAAAA,EAAQY,OACP,yCACa,gCAASZ,EAAOY,MAD7B,KAC6CZ,aAAA,EAAAA,EAAQiB,UAAW,KADhE,IAGE,uBAAGC,KAAI,yBAAyBf,aAAA,EAAAA,EAAQgB,UAAR,KAAhC,yC,kCCrEV,sIAiEeC,UAzDG,SAAC,GAAwB,IAAD,EAArBtB,EAAqB,EAArBA,KAAMuB,EAAe,EAAfA,SACnBC,GAAY,UAAAxB,EAAKG,KAAKC,oBAAV,eAAwBqB,QAAxB,QACZC,EAAQ1B,EAAK2B,kBAAkBC,MAErC,OAAqB,IAAjBF,EAAMG,OAEN,kBAAC,IAAD,CAAQN,SAAUA,EAAUE,MAAOD,GACjC,kBAAC,IAAD,CAAKC,MAAM,cACX,kBAAC,IAAD,MACA,yLAMJ,kBAAC,IAAD,CAAQF,SAAUA,EAAUE,MAAOD,GACjC,kBAAC,IAAD,CAAKC,MAAM,cACX,kBAAC,IAAD,MACCC,EAAMI,KAAI,SAACC,GACV,IAAMN,EAAQM,EAAKC,YAAYP,OAASM,EAAKE,OAAOC,KACpD,OACE,6BACEC,IAAKJ,EAAKE,OAAOC,KACjBE,WAAS,EACTC,SAAS,6BAET,gCACE,wBACE5B,MAAO,CACLE,aAAcC,YAAO,EAAI,KAG3B,kBAAC,OAAD,CACEH,MAAO,CAAE6B,UAAU,QACnBC,GAAIR,EAAKE,OAAOC,KAChBM,SAAS,OAET,0BAAMA,SAAS,YAAYf,KAG/B,+BAAQM,EAAKC,YAAYS,OAE3B,iCACE,uBACEC,wBAAyB,CACvBC,OAAQZ,EAAKC,YAAYY,aAAeb,EAAKc,SAE/CL,SAAS,uBAYlB,IAAMM,EAAS","file":"component---src-pages-index-js-6a9f250df97877a958a8.js","sourcesContent":["/**\n * Bio component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\nimport Image from \"gatsby-image\"\n\nimport { rhythm } from \"../utils/typography\"\n\nconst Bio = () => {\n  const data = useStaticQuery(graphql`\n    query BioQuery {\n      avatar: file(absolutePath: { regex: \"/profile-pic.jpg/\" }) {\n        childImageSharp {\n          fixed(width: 50, height: 50) {\n            ...GatsbyImageSharpFixed\n          }\n        }\n      }\n      site {\n        siteMetadata {\n          author {\n            name\n            summary\n          }\n          social {\n            twitter\n          }\n        }\n      }\n    }\n  `)\n\n  // Set these values by editing \"siteMetadata\" in gatsby-config.js\n  const author = data.site.siteMetadata?.author\n  const social = data.site.siteMetadata?.social\n\n  const avatar = data?.avatar?.childImageSharp?.fixed\n\n  return (\n    <div\n      style={{\n        display: `flex`,\n        marginBottom: rhythm(2.5),\n      }}\n    >\n      {avatar && (\n        <Image\n          fixed={avatar}\n          alt={author?.name || ``}\n          style={{\n            marginRight: rhythm(1 / 2),\n            marginBottom: 0,\n            minWidth: 50,\n            borderRadius: `100%`,\n          }}\n          imgStyle={{\n            borderRadius: `50%`,\n          }}\n        />\n      )}\n      {author?.name && (\n        <p>\n          Written by <strong>{author.name}</strong> {author?.summary || null}\n          {` `}\n          <a href={`https://twitter.com/${social?.twitter || ``}`}>\n            You should follow them on Twitter\n          </a>\n        </p>\n      )}\n    </div>\n  )\n}\n\nexport default Bio\n","import React from \"react\"\nimport { Link, graphql } from \"gatsby\"\n\nimport Bio from \"../components/bio\"\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport { rhythm } from \"../utils/typography\"\n\nconst BlogIndex = ({ data, location }) => {\n  const siteTitle = data.site.siteMetadata?.title || `Title`\n  const posts = data.allMarkdownRemark.nodes\n\n  if (posts.length === 0) {\n    return (\n      <Layout location={location} title={siteTitle}>\n        <SEO title=\"All posts\" />\n        <Bio />\n        <p>No blog posts found. Add markdown posts to \"content/blog\" (or the directory you specified for the \"gatsby-source-filesystem\" plugin in gatsby-config.js).</p>\n      </Layout>\n    )\n  }\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <SEO title=\"All posts\" />\n      <Bio />\n      {posts.map((post) => {\n        const title = post.frontmatter.title || post.fields.slug\n        return (\n          <article\n            key={post.fields.slug}\n            itemScope\n            itemType=\"http://schema.org/Article\"\n          >\n            <header>\n              <h3\n                style={{\n                  marginBottom: rhythm(1 / 4),\n                }}\n              >\n                <Link\n                  style={{ boxShadow: `none` }}\n                  to={post.fields.slug}\n                  itemProp=\"url\"\n                >\n                  <span itemProp=\"headline\">{title}</span>\n                </Link>\n              </h3>\n              <small>{post.frontmatter.date}</small>\n            </header>\n            <section>\n              <p\n                dangerouslySetInnerHTML={{\n                  __html: post.frontmatter.description || post.excerpt,\n                }}\n                itemProp=\"description\"\n              />\n            </section>\n          </article>\n        )\n      })}\n    </Layout>\n  )\n}\n\nexport default BlogIndex\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n      nodes {\n        excerpt\n        fields {\n          slug\n        }\n        frontmatter {\n          date(formatString: \"MMMM DD, YYYY\")\n          title\n          description\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}